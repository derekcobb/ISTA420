.echo on
.headers on

--Name: Homework Chapter 08a

--Author: Derek Cobb

--Date: July 30, 2019

--------------------------------------------------------------------

Read chapter 8, pages 249 - 266 in the T-SQL Fundamentals book.
Homework questions


--1. When using INSERT, is the list of columns necessary? Why or why not?
(pg 250) Specifying the target column names is optional, but by doing so you control the
value-column associations instead of relying on the order of the columns in the CREATE TABLE statement.
(Greg) If you have a data value for every column that needs a value then you do not have to list the columns.

--2. When using INSERT SELECT, do you use a subquery (derived table)? Under what circumstances do
you not use a subquery?
(pg 251/https://www.tutorialspoint.com/sql/sql-sub-queries) You can use a subquery with and INSERT SELECT.
A subquery (derived table) should not be used if one of the rows will fail to enter the target table since
none of the rows will enter if one can't
(Lorenzo) You always have 

--3. What is the operand for the INSERT EXEC statement?
(pg 251) The INSERT EXEC statement is similar in syntax
and concept to the INSERT SELECT statement, but instead of using a SELECT statement, you specify an
EXEC statement.
(Cherif) pg 251 The operand is the stored procedure

--4. How would you use the INSERT INTO statement?
(pg 252) The SELECT INTO statement is a nonstandard T-SQL statement that creates a target table and
populates it with the result set of a query. By “nonstandard,”  You cannot use this statement to insert data into an existing table.

--5.*What are the parameters to the BULK INSERT statement?
(pg 253) In the
statement, you specify the target table, the source file, and options. You can specify many options,
including the data file type (for example, char or native), the field terminator, the row terminator, and
others—all of which are fully documented.

--6. Does IDENTITY guarantee uniqueness? If not, how do you guarantee uniqueness?
(257) No. You need to understand that the identity property itself does not enforce uniqueness in the column.
If you need to guarantee uniqueness in an identity column,
make sure you also define a primary key or a unique constraint on that column.

--7. How do you create a SEQUENCE object?
(pg 258) To create a sequence object, use the CREATE SEQUENCE command. The minimum required
information is just the sequence name, but note that the defaults for the various properties in such a
case might not be what you want.

--8. How do you use a SEQUENCE object?
(pg 258) Like identity, the sequence object allows you to specify the starting value (START WITH <val>)
and the increment (INCREMENT BY <val>). If you don’t indicate the starting value, the default will be
the same as the minimum value (MINVALUE). If you don’t indicate the increment value, it will be 1 by
default.

--9. How do you alter a SEQUENCE object?
(pg 259) You can change any of the sequence properties except the data type with the ALTER SEQUENCE
command (MINVAL <val>, MAXVAL <val>, RESTART WITH <val>, INCREMENT BY <val>, CYCLE | NO
CYCLE, or CACHE <val> | NO CACHE). For example, suppose you want to prevent the sequence dbo.
SeqOrderIDs from cycling. You can change the current sequence definition with the following ALTER SEQUENCE command:
ALTER SEQUENCE dbo.SeqOrderIDs
NO CYCLE;

--10. What is the difference between DELETE and TRUNCATE?
(pgs 263 - 264) DELTE: The DELETE statement is a standard statement used to delete data from a table based on an optional
filter predicate. (Mr. Carter) DELETE deletes line by line.
TRUNCATE The standard TRUNCATE statement deletes all rows from a table. Unlike the DELETE statement, TRUNCATE has no filter. For example, to delete all rows from a table called dbo.T1, you run the
following code:
TRUNCATE TABLE dbo.T1; (Mr. Carter) TRUNCATE deletes in on fell swoop.

--11. What is the difference between DELETE and DROP TABLE?
(pg ) (Me) Delete permanently removes everything while DROP TABLE removes a specific table.
(Mr. Carter Delete removes all the data, DROP TABLE removes the table and the schema.